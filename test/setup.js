const hre = require("hardhat");

// Get the network provider
const provider = hre.network.provider;

before(async () => {
  async function getCode(name) {
    const contract = await hre.artifacts.readArtifact(name);
    return contract.deployedBytecode;
  }

  const ORACLE_PX_PRECOMPILE_ADDRESS = "0x0000000000000000000000000000000000000807";
  const SPOT_PX_PRECOMPILE_ADDRESS = "0x0000000000000000000000000000000000000808";
  const L1_BLOCK_NUMBER_PRECOMPILE_ADDRESS = "0x0000000000000000000000000000000000000809";
  const PERP_ASSET_INFO_PRECOMPILE_ADDRESS = "0x000000000000000000000000000000000000080a";
  const SPOT_INFO_PRECOMPILE_ADDRESS = "0x000000000000000000000000000000000000080b";
  const TOKEN_INFO_PRECOMPILE_ADDRESS = "0x000000000000000000000000000000000000080c";
  const POSITION_PRECOMPILE_ADDRESS = "0x0000000000000000000000000000000000000800";
  const SPOT_BALANCE_PRECOMPILE_ADDRESS = "0x0000000000000000000000000000000000000801";
  const VAULT_EQUITY_PRECOMPILE_ADDRESS = "0x0000000000000000000000000000000000000802";
  const WITHDRAWABLE_PRECOMPILE_ADDRESS = "0x0000000000000000000000000000000000000803";
  const DELEGATIONS_PRECOMPILE_ADDRESS = "0x0000000000000000000000000000000000000804";
  const DELEGATOR_SUMMARY_PRECOMPILE_ADDRESS = "0x0000000000000000000000000000000000000805";
  const MARK_PX_PRECOMPILE_ADDRESS = "0x0000000000000000000000000000000000000806";


  const L1_WRITE_PRECOMPILE_ADDRESS = "0x3333333333333333333333333333333333333333";

  const l1Precompiles = [
    ...[
      [ORACLE_PX_PRECOMPILE_ADDRESS, ("MockOraclePxPrecompile")],
      [SPOT_PX_PRECOMPILE_ADDRESS, ("MockSpotPxPrecompile")],
      [L1_BLOCK_NUMBER_PRECOMPILE_ADDRESS, ("MockL1BlockNumberPrecompile")],
      [PERP_ASSET_INFO_PRECOMPILE_ADDRESS, ("MockPerpAssetInfoPrecompile")],
      [SPOT_INFO_PRECOMPILE_ADDRESS, ("MockSpotInfoPrecompile")],
      [TOKEN_INFO_PRECOMPILE_ADDRESS, ("MockTokenInfoPrecompile")],
      [POSITION_PRECOMPILE_ADDRESS, ("MockPositionPrecompile")],
      [SPOT_BALANCE_PRECOMPILE_ADDRESS, ("MockSpotBalancePrecompile")],
      [VAULT_EQUITY_PRECOMPILE_ADDRESS, ("MockUserVaultEquityPrecompile")],
      [WITHDRAWABLE_PRECOMPILE_ADDRESS, ("MockWithdrawablePrecompile")],
      [DELEGATIONS_PRECOMPILE_ADDRESS, ("MockDelegationsPrecompile")],
      [DELEGATOR_SUMMARY_PRECOMPILE_ADDRESS, ("MockDelegatorSummaryPrecompile")],
      [MARK_PX_PRECOMPILE_ADDRESS, ("MockMarkPxPrecompile")],
    ],
    ...[
      [L1_WRITE_PRECOMPILE_ADDRESS, ("L1Write")],
    ],
  ];

  for (const [address, contractName] of l1Precompiles) {
    const code = await getCode(contractName);
    await provider.send("hardhat_setCode", [
      address,
      code
    ]);
  }
});
